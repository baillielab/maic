from .constants import T_METHOD_NONE as T_METHOD_NONE
from .entitylist import EntityList as EntityList
from typing import MutableSequence, Mapping

class Entity:
    name: str
    score: int|float
    lists: MutableSequence[EntityList]
    adjusted_scores: Mapping[str, int|float]
    def __init__(self, name: str) -> None: ...
    def transformed_score(self, method:str=...) -> float|int: ...
    def note_list(self, entity_list: EntityList): ...
    def forget_list(self, entity_list: EntityList): ...
    def calculate_new_score(self) -> None: ...
    def score_from_list(self, entity_list: EntityList) -> float|int: ...
    def raw_score_from_list(self, entity_list: EntityList) -> float|int: ...
    def winning_lists_by_category(self) -> dict[str,EntityList]: ...
    def reset(self) -> None: ...
