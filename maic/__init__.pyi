from .models import EntityListModel
from maic.io import Format, read_file as read_file
from maic.io.cv_dumper import CrossValidationDumper as CrossValidationDumper
from maic.io.cv_plotter import CrossValidationPlotter as CrossValidationPlotter
from maic.io.genescores_dumper import AllScoresGeneScoresDumper as AllScoresGeneScoresDumper, IterationAwareGeneScoresDumper as IterationAwareGeneScoresDumper
from typing import Sequence, Mapping
from argparse import Namespace

class Maic:
    @staticmethod
    def fromfile(filepath: str, *, format: Format = ..., threshold: float = ..., maxlistlength: int = ..., maxiterations: int = ..., output_folder: str = ..., plot: bool = ..., dump: bool = ...) -> Maic: ...
    @staticmethod
    def fromCLI(options: Namespace | None = ...) -> Maic: ...
    def __init__(self, *, modellist: Sequence[EntityListModel], threshold: float = ..., maxlistlength: int = ..., maxiterations: int = ...) -> None: ...
    @property
    def output_folder(self) -> str: ...
    @output_folder.setter
    def output_folder(self, value: str) -> None: ...
    def add_plotter(self, plotter: CrossValidationPlotter = ...) -> None: ...
    def add_dumper(self, dumper: CrossValidationDumper = ...) -> None: ...
    def run(self, *, dump_result: bool = ...) -> None: ...
    @property
    def sorted_results(self) -> Sequence[Mapping]: ...
    @property
    def methodology_feature_check(self) -> str: ...
    def dump_result(self, *, folder: str | None = ..., format=...) -> None: ...
